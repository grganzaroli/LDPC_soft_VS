// LDPC.cpp : LDPC-SPA (Sum-Product Algoritm)
//

#include "stdafx.h"
#include <cmath>
#include <time.h>
#include <stdio.h> 
#include <stdlib.h>

#pragma warning (disable: 4996)

double aTanh(double x)
{
	double ATANH[1999] = {-3.8002011673, -3.4533773893, -3.2503945224, -3.1063030479, -2.9944807084, -2.9030692406, -2.8257430856, -2.7587264482, -2.6995838634, -2.6466524124, -2.598746003, -2.5549888687, -2.5147159425, -2.4774102575, -2.442661996, -2.4101407828, -2.3795763922, -2.3507449785, -2.3234590338, -2.2975599251, -2.2729122539, -2.2493995294, -2.2269208036, -2.205388024, -2.1847239262, -2.164860341, -2.14573682, -2.1272995125, -2.1095002386, -2.09229572, -2.0756469371, -2.0595185874, -2.0438786285, -2.028697888, -2.0139497314, -1.9996097752, -1.9856556408, -1.9720667402, -1.95882409, -1.9459101491, -1.9333086756, -1.9210046024, -1.9089839259, -1.8972336083, -1.8857414913, -1.8744962181, -1.8634871646, -1.852704378, -1.8421385213, -1.8317808231, -1.8216230334, -1.8116573828, -1.8018765459, -1.7922736081, -1.7828420354, -1.7735756471, -1.7644685908, -1.7555153192, -1.7467105696, -1.7380493449, -1.7295268955, -1.7211387037, -1.7128804685, -1.7047480922, -1.6967376678, -1.688845467, -1.6810679299, -1.6734016548, -1.6658433889, -1.6583900199, -1.6510385679, -1.6437861781, -1.6366301136, -1.6295677496, -1.6225965666, -1.6157141455, -1.6089181619, -1.6022063814, -1.5955766552, -1.5890269152, -1.5825551707, -1.5761595041, -1.5698380676, -1.5635890798, -1.5574108226, -1.5513016379, -1.5452599254, -1.5392841396, -1.5333727873, -1.5275244254, -1.5217376586, -1.5160111375, -1.5103435562, -1.504733651, -1.499180198, -1.4936820119, -1.4882379444, -1.4828468822, -1.4775077462, -1.4722194896, -1.466981097, -1.4617915829, -1.4566499909, -1.4515553918, -1.4465068837, -1.4415035898, -1.4365446584, -1.4316292612, -1.4267565932, -1.4219258711, -1.4171363331, -1.4123872377, -1.4076778633, -1.4030075074, -1.3983754858, -1.393781132, -1.3892237969, -1.3847028478, -1.3802176681, -1.3757676565, -1.3713522269, -1.3669708075, -1.3626228406, -1.358307782, -1.3540251006, -1.3497742779, -1.345554808, -1.3413661966, -1.337207961, -1.3330796297, -1.3289807421, -1.3249108481, -1.3208695077, -1.3168562907, -1.3128707768, -1.3089125548, -1.3049812224, -1.3010763863, -1.2971976618, -1.293344672, -1.2895170487, -1.2857144309, -1.2819364655, -1.2781828069, -1.2744531163, -1.2707470622, -1.2670643198, -1.2634045707, -1.2597675033, -1.256152812, -1.2525601973, -1.2489893657, -1.2454400294, -1.2419119063, -1.2384047198, -1.2349181984, -1.2314520762, -1.2280060919, -1.2245799895, -1.2211735177, -1.2177864298, -1.2144184838, -1.2110694422, -1.2077390717, -1.2044271433, -1.2011334322, -1.1978577177, -1.1945997829, -1.1913594149, -1.1881364044, -1.1849305459, -1.1817416376, -1.1785694809, -1.175413881, -1.172274646, -1.1691515878, -1.1660445211, -1.1629532638, -1.1598776369, -1.1568174646, -1.1537725736, -1.1507427938, -1.1477279578, -1.1447279008, -1.1417424608, -1.1387714785, -1.135814797, -1.1328722619, -1.1299437214, -1.127029026, -1.1241280287, -1.1212405845, -1.1183665508, -1.1155057875, -1.1126581561, -1.1098235207, -1.1070017472, -1.1041927037, -1.1013962602, -1.0986122887, -1.0958406629, -1.0930812588, -1.0903339539, -1.0875986275, -1.0848751609, -1.0821634369, -1.0794633402, -1.0767747569, -1.074097575, -1.0714316841, -1.068776975, -1.0661333405, -1.0635006747, -1.0608788732, -1.058267833, -1.0556674527, -1.0530776322, -1.0504982726, -1.0479292767, -1.0453705485, -1.0428219931, -1.0402835171, -1.0377550283, -1.0352364358, -1.0327276499, -1.0302285818, -1.0277391443, -1.0252592511, -1.0227888171, -1.0203277583, -1.0178759918, -1.0154334358, -1.0130000094, -1.0105756329, -1.0081602276, -1.0057537158, -1.0033560206, -1.0009670664, -0.9985867783, -0.9962150823, -0.9938519056, -0.991497176, -0.9891508224, -0.9868127745, -0.9844829627, -0.9821613185, -0.9798477741, -0.9775422627, -0.9752447179, -0.9729550745, -0.9706732679, -0.9683992344, -0.9661329107, -0.9638742347, -0.9616231447, -0.95937958, -0.9571434803, -0.9549147862, -0.952693439, -0.9504793806, -0.9482725535, -0.946072901, -0.943880367, -0.941694896, -0.9395164332, -0.9373449243, -0.9351803157, -0.9330225543, -0.9308715878, -0.9287273642, -0.9265898324, -0.9244589415, -0.9223346415, -0.9202168826, -0.9181056159, -0.9160007928, -0.9139023652, -0.9118102856, -0.9097245072, -0.9076449833, -0.905571668, -0.9035045158, -0.9014434816, -0.8993885209, -0.8973395897, -0.8952966442, -0.8932596413, -0.8912285383, -0.8892032929, -0.8871838633, -0.885170208, -0.883162286, -0.8811600569, -0.8791634804, -0.8771725167, -0.8751871265, -0.8732072709, -0.8712329113, -0.8692640095, -0.8673005277, -0.8653424285, -0.8633896747, -0.8614422299, -0.8595000575, -0.8575631216, -0.8556313866, -0.8537048173, -0.8517833786, -0.849867036, -0.8479557552, -0.8460495023, -0.8441482437, -0.842251946, -0.8403605763, -0.838474102, -0.8365924906, -0.8347157102, -0.8328437289, -0.8309765153, -0.8291140383, -0.827256267, -0.8254031707, -0.8235547193, -0.8217108826, -0.819871631, -0.8180369348, -0.816206765, -0.8143810926, -0.8125598889, -0.8107431255, -0.8089307741, -0.807122807, -0.8053191964, -0.8035199149, -0.8017249353, -0.7999342307, -0.7981477744, -0.79636554, -0.7945875011, -0.7928136319, -0.7910439065, -0.7892782993, -0.7875167851, -0.7857593388, -0.7840059354, -0.7822565503, -0.7805111589, -0.7787697372, -0.7770322609, -0.7752987062, -0.7735690495, -0.7718432674, -0.7701213366, -0.7684032341, -0.7666889369, -0.7649784224, -0.7632716681, -0.7615686518, -0.7598693513, -0.7581737447, -0.7564818102, -0.7547935263, -0.7531088716, -0.7514278248, -0.7497503649, -0.748076471, -0.7464061225, -0.7447392987, -0.7430759793, -0.7414161441, -0.739759773, -0.7381068461, -0.7364573438, -0.7348112463, -0.7331685344, -0.7315291887, -0.72989319, -0.7282605195, -0.7266311583, -0.7250050878, -0.7233822893, -0.7217627445, -0.7201464352, -0.7185333432, -0.7169234507, -0.7153167397, -0.7137131925, -0.7121127917, -0.7105155198, -0.7089213594, -0.7073302935, -0.705742305, -0.7041573769, -0.7025754926, -0.7009966353, -0.6994207886, -0.697847936, -0.6962780612, -0.6947111481, -0.6931471806, -0.6915861428, -0.6900280189, -0.6884727931, -0.68692045, -0.6853709741, -0.6838243499, -0.6822805622, -0.680739596, -0.6792014361, -0.6776660678, -0.676133476, -0.6746036462, -0.6730765638, -0.6715522142, -0.670030583, -0.6685116561, -0.666995419, -0.6654818579, -0.6639709586, -0.6624627074, -0.6609570903, -0.6594540937, -0.657953704, -0.6564559076, -0.6549606912, -0.6534680414, -0.6519779449, -0.6504903887, -0.6490053597, -0.6475228448, -0.6460428313, -0.6445653063, -0.6430902572, -0.6416176712, -0.6401475359, -0.6386798389, -0.6372145677, -0.63575171, -0.6342912537, -0.6328331867, -0.6313774968, -0.6299241722, -0.6284732009, -0.6270245712, -0.6255782712, -0.6241342895, -0.6226926143, -0.6212532342, -0.6198161377, -0.6183813136, -0.6169487505, -0.6155184372, -0.6140903625, -0.6126645156, -0.6112408852, -0.6098194605, -0.6084002307, -0.606983185, -0.6055683126, -0.604155603, -0.6027450454, -0.6013366295, -0.5999303447, -0.5985261807, -0.5971241272, -0.5957241739, -0.5943263106, -0.5929305272, -0.5915368136, -0.5901451598, -0.588755556, -0.5873679921, -0.5859824584, -0.5845989451, -0.5832174425, -0.581837941, -0.580460431, -0.579084903, -0.5777113474, -0.576339755, -0.5749701162, -0.573602422, -0.5722366628, -0.5708728297, -0.5695109135, -0.568150905, -0.5667927954, -0.5654365754, -0.5640822364, -0.5627297694, -0.5613791655, -0.560030416, -0.5586835123, -0.5573384456, -0.5559952073, -0.5546537889, -0.5533141818, -0.5519763776, -0.5506403679, -0.5493061443,
		-0.5479736985, -0.5466430222, -0.5453141072, -0.5439869452, -0.5426615283, -0.5413378482, -0.540015897, -0.5386956666, -0.5373771491, -0.5360603366, -0.5347452212, -0.5334317952, -0.5321200506, -0.5308099799, -0.5295015753, -0.5281948291, -0.5268897338, -0.5255862818, -0.5242844656, -0.5229842776, -0.5216857105, -0.5203887568, -0.5190934092, -0.5177996604, -0.5165075031, -0.51521693, -0.513927934, -0.5126405078, -0.5113546444, -0.5100703366, -0.5087875775, -0.5075063599, -0.506226677, -0.5049485217, -0.5036718873, -0.5023967667, -0.5011231533, -0.4998510401, -0.4985804204, -0.4973112876, -0.4960436348, -0.4947774556, -0.4935127431, -0.492249491, -0.4909876925, -0.4897273412, -0.4884684306, -0.4872109542, -0.4859549057, -0.4847002786, -0.4834470666, -0.4821952633, -0.4809448626, -0.479695858, -0.4784482434, -0.4772020126, -0.4759571594, -0.4747136777, -0.4734715614, -0.4722308044, -0.4709914007, -0.4697533442, -0.468516629, -0.4672812491, -0.4660471985, -0.4648144715, -0.4635830621, -0.4623529644, -0.4611241727, -0.4598966812, -0.4586704841, -0.4574455758, -0.4562219504, -0.4549996023, -0.453778526, -0.4525587156, -0.4513401658, -0.4501228708, -0.4489068253, -0.4476920235, -0.4464784602, -0.4452661297, -0.4440550267, -0.4428451457, -0.4416364814, -0.4404290284, -0.4392227814, -0.4380177351, -0.4368138841, -0.4356112232, -0.4344097472, -0.4332094509, -0.4320103291, -0.4308123765, -0.4296155881, -0.4284199588, -0.4272254834, -0.4260321568, -0.4248399741, -0.4236489302, -0.4224590201, -0.4212702387, -0.4200825813, -0.4188960427, -0.4177106181, -0.4165263026, -0.4153430914, -0.4141609795, -0.4129799621, -0.4118000345, -0.4106211918, -0.4094434293, -0.4082667422, -0.4070911258, -0.4059165754, -0.4047430863, -0.4035706539, -0.4023992734, -0.4012289404, -0.4000596501, -0.3988913979, -0.3977241794, -0.39655799, -0.3953928251, -0.3942286802, -0.3930655508, -0.3919034326, -0.3907423209, -0.3895822114, -0.3884230997, -0.3872649814, -0.386107852, -0.3849517073, -0.3837965428, -0.3826423544, -0.3814891375, -0.3803368881, -0.3791856017, -0.3780352741, -0.3768859012, -0.3757374786, -0.3745900022, -0.3734434678, -0.3722978712, -0.3711532083, -0.3700094748, -0.3688666668, -0.3677247801, -0.3665838106, -0.3654437543, -0.364304607, -0.3631663648, -0.3620290236, -0.3608925794, -0.3597570282, -0.3586223661, -0.357488589, -0.3563556931, -0.3552236744, -0.354092529, -0.3529622529, -0.3518328424, -0.3507042935, -0.3495766023, -0.3484497651, -0.347323778, -0.3461986371, -0.3450743388, -0.3439508791, -0.3428282544, -0.3417064609, -0.3405854948, -0.3394653523, -0.3383460299, -0.3372275238, -0.3361098302, -0.3349929456, -0.3338768662, -0.3327615885, -0.3316471087, -0.3305334233, -0.3294205286, -0.3283084211, -0.3271970971, -0.3260865532, -0.3249767857, -0.323867791, -0.3227595658, -0.3216521064, -0.3205454093, -0.3194394711, -0.3183342882, -0.3172298572, -0.3161261747, -0.3150232371, -0.3139210411, -0.3128195832, -0.31171886, -0.3106188681, -0.3095196042, -0.3084210648, -0.3073232466, -0.3062261463, -0.3051297604, -0.3040340857, -0.3029391188, -0.3018448564, -0.3007512953, -0.2996584322, -0.2985662637, -0.2974747866, -0.2963839976, -0.2952938936, -0.2942044712, -0.2931157273, -0.2920276586, -0.290940262, -0.2898535342, -0.2887674721, -0.2876820725, -0.2865973321, -0.285513248, -0.2844298169, -0.2833470358, -0.2822649014, -0.2811834107, -0.2801025605, -0.2790223479, -0.2779427696, -0.2768638227, -0.275785504, -0.2747078105, -0.2736307392, -0.272554287, -0.271478451, -0.270403228, -0.2693286151, -0.2682546093, -0.2671812075, -0.2661084069, -0.2650362044, -0.263964597, -0.2628935819, -0.2618231561, -0.2607533166, -0.2596840605, -0.2586153849, -0.2575472868, -0.2564797635, -0.2554128119, -0.2543464292, -0.2532806125, -0.2522153589, -0.2511506657, -0.2500865298, -0.2490229486, -0.247959919, -0.2468974384, -0.2458355039, -0.2447741127, -0.2437132619, -0.2426529488, -0.2415931706, -0.2405339244, -0.2394752076, -0.2384170174, -0.2373593509, -0.2363022055, -0.2352455783, -0.2341894668, -0.233133868, -0.2320787793, -0.2310241981, -0.2299701215, -0.2289165468, -0.2278634714, -0.2268108927, -0.2257588078, -0.2247072141, -0.223656109, -0.2226054898, -0.2215553539, -0.2205056985, -0.2194565211, -0.218407819, -0.2173595896, -0.2163118303, -0.2152645384, -0.2142177114, -0.2131713466, -0.2121254414, -0.2110799933, -0.2100349997, -0.208990458, -0.2079463656, -0.20690272, -0.2058595186, -0.2048167588, -0.2037744382, -0.2027325541, -0.201691104, -0.2006500854, -0.1996094958, -0.1985693327, -0.1975295935, -0.1964902757, -0.1954513769, -0.1944128946, -0.1933748261, -0.1923371692, -0.1912999213, -0.1902630799, -0.1892266425, -0.1881906068, -0.1871549702, -0.1861197302, -0.1850848846, -0.1840504307, -0.1830163662, -0.1819826886, -0.1809493955, -0.1799164846, -0.1788839533, -0.1778517993, -0.1768200201, -0.1757886134, -0.1747575768, -0.1737269079, -0.1726966042, -0.1716666635, -0.1706370833, -0.1696078613, -0.1685789951, -0.1675504823, -0.1665223206, -0.1654945076, -0.164467041, -0.1634399185, -0.1624131376, -0.1613866961, -0.1603605917, -0.1593348219, -0.1583093846, -0.1572842773, -0.1562594978, -0.1552350437, -0.1542109128, -0.1531871027, -0.1521636112, -0.1511404359, -0.1501175746, -0.149095025, -0.1480727848, -0.1470508517, -0.1460292235, -0.1450078979, -0.1439868726, -0.1429661454, -0.1419457139, -0.1409255761, -0.1399057295, -0.138886172, -0.1378669013, -0.1368479152, -0.1358292115, -0.1348107879, -0.1337926421, -0.1327747721, -0.1317571754, -0.13073985, -0.1297227936, -0.1287060041, -0.1276894791, -0.1266732165, -0.1256572141, -0.1246414698, -0.1236259812, -0.1226107462, -0.1215957627, -0.1205810284, -0.1195665412, -0.1185522989, -0.1175382992, -0.1165245402, -0.1155110194, -0.1144977349, -0.1134846845, -0.1124718659, -0.1114592771, -0.1104469158, -0.1094347799, -0.1084228674, -0.1074111759, -0.1063997035, -0.1053884478, -0.1043774069, -0.1033665786, -0.1023559607, -0.1013455511, -0.1003353477, -0.0993253484, -0.098315551, -0.0973059534, -0.0962965536, -0.0952873493, -0.0942783385, -0.093269519, -0.0922608889, -0.0912524458, -0.0902441879, -0.0892361128, -0.0882282187, -0.0872205033, -0.0862129645, -0.0852056003, -0.0841984087, -0.0831913874, -0.0821845344, -0.0811778476, -0.080171325, -0.0791649645, -0.078158764, -0.0771527213, -0.0761468345, -0.0751411015, -0.0741355202, -0.0731300885, -0.0721248044, -0.0711196658, -0.0701146707, -0.0691098169, -0.0681051024, -0.0671005252, -0.0660960832, -0.0650917744, -0.0640875967, -0.0630835481, -0.0620796264, -0.0610758297, -0.0600721559, -0.059068603, -0.0580651689, -0.0570618516, -0.0560586491, -0.0550555592, -0.05405258, -0.0530497095, -0.0520469455, -0.0510442861, -0.0500417293, -0.0490392729, -0.048036915, -0.0470346536, -0.0460324866, -0.045030412, -0.0440284277, -0.0430265318, -0.0420247222, -0.0410229969, -0.0400213538, -0.0390197911, -0.0380183065, -0.0370168982, -0.0360155641, -0.0350143022, -0.0340131104, -0.0330119868, -0.0320109294, -0.0310099361, -0.0300090049, -0.0290081338, -0.0280073208, -0.0270065639, -0.026005861, -0.0250052103, -0.0240046096, -0.023004057, -0.0220035504, -0.0210030878, -0.0200026673, -0.0190022868, -0.0180019444, -0.017001638, -0.0160013655, -0.0150011252, -0.0140009148, -0.0130007324, -0.012000576, -0.0110004437, -0.0100003334, -0.009000243, -0.0080001707, -0.0070001143, -0.006000072, -0.0050000417, -0.0040000213, -0.003000009, -0.0020000027, -0.0010000003, 0, 
		0.0010000003, 0.0020000027, 0.003000009, 0.0040000213, 0.0050000417, 0.006000072, 0.0070001143, 0.0080001707, 0.009000243, 0.0100003334, 0.0110004437, 0.012000576, 0.0130007324, 0.0140009148, 0.0150011252, 0.0160013655, 0.017001638, 0.0180019444, 0.0190022868, 0.0200026673, 0.0210030878, 0.0220035504, 0.023004057, 0.0240046096, 0.0250052103, 0.026005861, 0.0270065639, 0.0280073208, 0.0290081338, 0.0300090049, 0.0310099361, 0.0320109294, 0.0330119868, 0.0340131104, 0.0350143022, 0.0360155641, 0.0370168982, 0.0380183065, 0.0390197911, 0.0400213538, 0.0410229969, 0.0420247222, 0.0430265318, 0.0440284277, 0.045030412, 0.0460324866, 0.0470346536, 0.048036915, 0.0490392729, 0.0500417293, 0.0510442861, 0.0520469455, 0.0530497095, 0.05405258, 0.0550555592, 0.0560586491, 0.0570618516, 0.0580651689, 0.059068603, 0.0600721559, 0.0610758297, 0.0620796264, 0.0630835481, 0.0640875967, 0.0650917744, 0.0660960832, 0.0671005252, 0.0681051024, 0.0691098169, 0.0701146707, 0.0711196658, 0.0721248044, 0.0731300885, 0.0741355202, 0.0751411015, 0.0761468345, 0.0771527213, 0.078158764, 0.0791649645, 0.080171325, 0.0811778476, 0.0821845344, 0.0831913874, 0.0841984087, 0.0852056003, 0.0862129645, 0.0872205033, 0.0882282187, 0.0892361128, 0.0902441879, 0.0912524458, 0.0922608889, 0.093269519, 0.0942783385, 0.0952873493, 0.0962965536, 0.0973059534, 0.098315551, 0.0993253484, 0.1003353477, 0.1013455511, 0.1023559607, 0.1033665786, 0.1043774069, 0.1053884478, 0.1063997035, 0.1074111759, 0.1084228674, 0.1094347799, 0.1104469158, 0.1114592771, 0.1124718659, 0.1134846845, 0.1144977349, 0.1155110194, 0.1165245402, 0.1175382992, 0.1185522989, 0.1195665412, 0.1205810284, 0.1215957627, 0.1226107462, 0.1236259812, 0.1246414698, 0.1256572141, 0.1266732165, 0.1276894791, 0.1287060041, 0.1297227936, 0.13073985, 0.1317571754, 0.1327747721, 0.1337926421, 0.1348107879, 0.1358292115, 0.1368479152, 0.1378669013, 0.138886172, 0.1399057295, 0.1409255761, 0.1419457139, 0.1429661454, 0.1439868726, 0.1450078979, 0.1460292235, 0.1470508517, 0.1480727848, 0.149095025, 0.1501175746, 0.1511404359, 0.1521636112, 0.1531871027, 0.1542109128, 0.1552350437, 0.1562594978, 0.1572842773, 0.1583093846, 0.1593348219, 0.1603605917, 0.1613866961, 0.1624131376, 0.1634399185, 0.164467041, 0.1654945076, 0.1665223206, 0.1675504823, 0.1685789951, 0.1696078613, 0.1706370833, 0.1716666635, 0.1726966042, 0.1737269079, 0.1747575768, 0.1757886134, 0.1768200201, 0.1778517993, 0.1788839533, 0.1799164846, 0.1809493955, 0.1819826886, 0.1830163662, 0.1840504307, 0.1850848846, 0.1861197302, 0.1871549702, 0.1881906068, 0.1892266425, 0.1902630799, 0.1912999213, 0.1923371692, 0.1933748261, 0.1944128946, 0.1954513769, 0.1964902757, 0.1975295935, 0.1985693327, 0.1996094958, 0.2006500854, 0.201691104, 0.2027325541, 0.2037744382, 0.2048167588, 0.2058595186, 0.20690272, 0.2079463656, 0.208990458, 0.2100349997, 0.2110799933, 0.2121254414, 0.2131713466, 0.2142177114, 0.2152645384, 0.2163118303, 0.2173595896, 0.218407819, 0.2194565211, 0.2205056985, 0.2215553539, 0.2226054898, 0.223656109, 0.2247072141, 0.2257588078, 0.2268108927, 0.2278634714, 0.2289165468, 0.2299701215, 0.2310241981, 0.2320787793, 0.233133868, 0.2341894668, 0.2352455783, 0.2363022055, 0.2373593509, 0.2384170174, 0.2394752076, 0.2405339244, 0.2415931706, 0.2426529488, 0.2437132619, 0.2447741127, 0.2458355039, 0.2468974384, 0.247959919, 0.2490229486, 0.2500865298, 0.2511506657, 0.2522153589, 0.2532806125, 0.2543464292, 0.2554128119, 0.2564797635, 0.2575472868, 0.2586153849, 0.2596840605, 0.2607533166, 0.2618231561, 0.2628935819, 0.263964597, 0.2650362044, 0.2661084069, 0.2671812075, 0.2682546093, 0.2693286151, 0.270403228, 0.271478451, 0.272554287, 0.2736307392, 0.2747078105, 0.275785504, 0.2768638227, 0.2779427696, 0.2790223479, 0.2801025605, 0.2811834107, 0.2822649014, 0.2833470358, 0.2844298169, 0.285513248, 0.2865973321, 0.2876820725, 0.2887674721, 0.2898535342, 0.290940262, 0.2920276586, 0.2931157273, 0.2942044712, 0.2952938936, 0.2963839976, 0.2974747866, 0.2985662637, 0.2996584322, 0.3007512953, 0.3018448564, 0.3029391188, 0.3040340857, 0.3051297604, 0.3062261463, 0.3073232466, 0.3084210648, 0.3095196042, 0.3106188681, 0.31171886, 0.3128195832, 0.3139210411, 0.3150232371, 0.3161261747, 0.3172298572, 0.3183342882, 0.3194394711, 0.3205454093, 0.3216521064, 0.3227595658, 0.323867791, 0.3249767857, 0.3260865532, 0.3271970971, 0.3283084211, 0.3294205286, 0.3305334233, 0.3316471087, 0.3327615885, 0.3338768662, 0.3349929456, 0.3361098302, 0.3372275238, 0.3383460299, 0.3394653523, 0.3405854948, 0.3417064609, 0.3428282544, 0.3439508791, 0.3450743388, 0.3461986371, 0.347323778, 0.3484497651, 0.3495766023, 0.3507042935, 0.3518328424, 0.3529622529, 0.354092529, 0.3552236744, 0.3563556931, 0.357488589, 0.3586223661, 0.3597570282, 0.3608925794, 0.3620290236, 0.3631663648, 0.364304607, 0.3654437543, 0.3665838106, 0.3677247801, 0.3688666668, 0.3700094748, 0.3711532083, 0.3722978712, 0.3734434678, 0.3745900022, 0.3757374786, 0.3768859012, 0.3780352741, 0.3791856017, 0.3803368881, 0.3814891375, 0.3826423544, 0.3837965428, 0.3849517073, 0.386107852, 0.3872649814, 0.3884230997, 0.3895822114, 0.3907423209, 0.3919034326, 0.3930655508, 0.3942286802, 0.3953928251, 0.39655799, 0.3977241794, 0.3988913979, 0.4000596501, 0.4012289404, 0.4023992734, 0.4035706539, 0.4047430863, 0.4059165754, 0.4070911258, 0.4082667422, 0.4094434293, 0.4106211918, 0.4118000345, 0.4129799621, 0.4141609795, 0.4153430914, 0.4165263026, 0.4177106181, 0.4188960427, 0.4200825813, 0.4212702387, 0.4224590201, 0.4236489302, 0.4248399741, 0.4260321568, 0.4272254834, 0.4284199588, 0.4296155881, 0.4308123765, 0.4320103291, 0.4332094509, 0.4344097472, 0.4356112232, 0.4368138841, 0.4380177351, 0.4392227814, 0.4404290284, 0.4416364814, 0.4428451457, 0.4440550267, 0.4452661297, 0.4464784602, 0.4476920235, 0.4489068253, 0.4501228708, 0.4513401658, 0.4525587156, 0.453778526, 0.4549996023, 0.4562219504, 0.4574455758, 0.4586704841, 0.4598966812, 0.4611241727, 0.4623529644, 0.4635830621, 0.4648144715, 0.4660471985, 0.4672812491, 0.468516629, 0.4697533442, 0.4709914007, 0.4722308044, 0.4734715614, 0.4747136777, 0.4759571594, 0.4772020126, 0.4784482434, 0.479695858, 0.4809448626, 0.4821952633, 0.4834470666, 0.4847002786, 0.4859549057, 0.4872109542, 0.4884684306, 0.4897273412, 0.4909876925, 0.492249491, 0.4935127431, 0.4947774556, 0.4960436348, 0.4973112876, 0.4985804204, 0.4998510401, 0.5011231533, 0.5023967667, 0.5036718873, 0.5049485217, 0.506226677, 0.5075063599, 0.5087875775, 0.5100703366, 0.5113546444, 0.5126405078, 0.513927934, 0.51521693, 0.5165075031, 0.5177996604, 0.5190934092, 0.5203887568, 0.5216857105, 0.5229842776, 0.5242844656, 0.5255862818, 0.5268897338, 0.5281948291, 0.5295015753, 0.5308099799, 0.5321200506, 0.5334317952, 0.5347452212, 0.5360603366, 0.5373771491, 0.5386956666, 0.540015897, 0.5413378482, 0.5426615283, 0.5439869452, 0.5453141072, 0.5466430222, 0.5479736985, 0.5493061443, 
		0.5506403679, 0.5519763776, 0.5533141818, 0.5546537889, 0.5559952073, 0.5573384456, 0.5586835123, 0.560030416, 0.5613791655, 0.5627297694, 0.5640822364, 0.5654365754, 0.5667927954, 0.568150905, 0.5695109135, 0.5708728297, 0.5722366628, 0.573602422, 0.5749701162, 0.576339755, 0.5777113474, 0.579084903, 0.580460431, 0.581837941, 0.5832174425, 0.5845989451, 0.5859824584, 0.5873679921, 0.588755556, 0.5901451598, 0.5915368136, 0.5929305272, 0.5943263106, 0.5957241739, 0.5971241272, 0.5985261807, 0.5999303447, 0.6013366295, 0.6027450454, 0.604155603, 0.6055683126, 0.606983185, 0.6084002307, 0.6098194605, 0.6112408852, 0.6126645156, 0.6140903625, 0.6155184372, 0.6169487505, 0.6183813136, 0.6198161377, 0.6212532342, 0.6226926143, 0.6241342895, 0.6255782712, 0.6270245712, 0.6284732009, 0.6299241722, 0.6313774968, 0.6328331867, 0.6342912537, 0.63575171, 0.6372145677, 0.6386798389, 0.6401475359, 0.6416176712, 0.6430902572, 0.6445653063, 0.6460428313, 0.6475228448, 0.6490053597, 0.6504903887, 0.6519779449, 0.6534680414, 0.6549606912, 0.6564559076, 0.657953704, 0.6594540937, 0.6609570903, 0.6624627074, 0.6639709586, 0.6654818579, 0.666995419, 0.6685116561, 0.670030583, 0.6715522142, 0.6730765638, 0.6746036462, 0.676133476, 0.6776660678, 0.6792014361, 0.680739596, 0.6822805622, 0.6838243499, 0.6853709741, 0.68692045, 0.6884727931, 0.6900280189, 0.6915861428, 0.6931471806, 0.6947111481, 0.6962780612, 0.697847936, 0.6994207886, 0.7009966353, 0.7025754926, 0.7041573769, 0.705742305, 0.7073302935, 0.7089213594, 0.7105155198, 0.7121127917, 0.7137131925, 0.7153167397, 0.7169234507, 0.7185333432, 0.7201464352, 0.7217627445, 0.7233822893, 0.7250050878, 0.7266311583, 0.7282605195, 0.72989319, 0.7315291887, 0.7331685344, 0.7348112463, 0.7364573438, 0.7381068461, 0.739759773, 0.7414161441, 0.7430759793, 0.7447392987, 0.7464061225, 0.748076471, 0.7497503649, 0.7514278248, 0.7531088716, 0.7547935263, 0.7564818102, 0.7581737447, 0.7598693513, 0.7615686518, 0.7632716681, 0.7649784224, 0.7666889369, 0.7684032341, 0.7701213366, 0.7718432674, 0.7735690495, 0.7752987062, 0.7770322609, 0.7787697372, 0.7805111589, 0.7822565503, 0.7840059354, 0.7857593388, 0.7875167851, 0.7892782993, 0.7910439065, 0.7928136319, 0.7945875011, 0.79636554, 0.7981477744, 0.7999342307, 0.8017249353, 0.8035199149, 0.8053191964, 0.807122807, 0.8089307741, 0.8107431255, 0.8125598889, 0.8143810926, 0.816206765, 0.8180369348, 0.819871631, 0.8217108826, 0.8235547193, 0.8254031707, 0.827256267, 0.8291140383, 0.8309765153, 0.8328437289, 0.8347157102, 0.8365924906, 0.838474102, 0.8403605763, 0.842251946, 0.8441482437, 0.8460495023, 0.8479557552, 0.849867036, 0.8517833786, 0.8537048173, 0.8556313866, 0.8575631216, 0.8595000575, 0.8614422299, 0.8633896747, 0.8653424285, 0.8673005277, 0.8692640095, 0.8712329113, 0.8732072709, 0.8751871265, 0.8771725167, 0.8791634804, 0.8811600569, 0.883162286, 0.885170208, 0.8871838633, 0.8892032929, 0.8912285383, 0.8932596413, 0.8952966442, 0.8973395897, 0.8993885209, 0.9014434816, 0.9035045158, 0.905571668, 0.9076449833, 0.9097245072, 0.9118102856, 0.9139023652, 0.9160007928, 0.9181056159, 0.9202168826, 0.9223346415, 0.9244589415, 0.9265898324, 0.9287273642, 0.9308715878, 0.9330225543, 0.9351803157, 0.9373449243, 0.9395164332, 0.941694896, 0.943880367, 0.946072901, 0.9482725535, 0.9504793806, 0.952693439, 0.9549147862, 0.9571434803, 0.95937958, 0.9616231447, 0.9638742347, 0.9661329107, 0.9683992344, 0.9706732679, 0.9729550745, 0.9752447179, 0.9775422627, 0.9798477741, 0.9821613185, 0.9844829627, 0.9868127745, 0.9891508224, 0.991497176, 0.9938519056, 0.9962150823, 0.9985867783, 1.0009670664, 1.0033560206, 1.0057537158, 1.0081602276, 1.0105756329, 1.0130000094, 1.0154334358, 1.0178759918, 1.0203277583, 1.0227888171, 1.0252592511, 1.0277391443, 1.0302285818, 1.0327276499, 1.0352364358, 1.0377550283, 1.0402835171, 1.0428219931, 1.0453705485, 1.0479292767, 1.0504982726, 1.0530776322, 1.0556674527, 1.058267833, 1.0608788732, 1.0635006747, 1.0661333405, 1.068776975, 1.0714316841, 1.074097575, 1.0767747569, 1.0794633402, 1.0821634369, 1.0848751609, 1.0875986275, 1.0903339539, 1.0930812588, 1.0958406629, 1.0986122887, 1.1013962602, 1.1041927037, 1.1070017472, 1.1098235207, 1.1126581561, 1.1155057875, 1.1183665508, 1.1212405845, 1.1241280287, 1.127029026, 1.1299437214, 1.1328722619, 1.135814797, 1.1387714785, 1.1417424608, 1.1447279008, 1.1477279578, 1.1507427938, 1.1537725736, 1.1568174646, 1.1598776369, 1.1629532638, 1.1660445211, 1.1691515878, 1.172274646, 1.175413881, 1.1785694809, 1.1817416376, 1.1849305459, 1.1881364044, 1.1913594149, 1.1945997829, 1.1978577177, 1.2011334322, 1.2044271433, 1.2077390717, 1.2110694422, 1.2144184838, 1.2177864298, 1.2211735177, 1.2245799895, 1.2280060919, 1.2314520762, 1.2349181984, 1.2384047198, 1.2419119063, 1.2454400294, 1.2489893657, 1.2525601973, 1.256152812, 1.2597675033, 1.2634045707, 1.2670643198, 1.2707470622, 1.2744531163, 1.2781828069, 1.2819364655, 1.2857144309, 1.2895170487, 1.293344672, 1.2971976618, 1.3010763863, 1.3049812224, 1.3089125548, 1.3128707768, 1.3168562907, 1.3208695077, 1.3249108481, 1.3289807421, 1.3330796297, 1.337207961, 1.3413661966, 1.345554808, 1.3497742779, 1.3540251006, 1.358307782, 1.3626228406, 1.3669708075, 1.3713522269, 1.3757676565, 1.3802176681, 1.3847028478, 1.3892237969, 1.393781132, 1.3983754858, 1.4030075074, 1.4076778633, 1.4123872377, 1.4171363331, 1.4219258711, 1.4267565932, 1.4316292612, 1.4365446584, 1.4415035898, 1.4465068837, 1.4515553918, 1.4566499909, 1.4617915829, 1.466981097, 1.4722194896, 1.4775077462, 1.4828468822, 1.4882379444, 1.4936820119, 1.499180198, 1.504733651, 1.5103435562, 1.5160111375, 1.5217376586, 1.5275244254, 1.5333727873, 1.5392841396, 1.5452599254, 1.5513016379, 1.5574108226, 1.5635890798, 1.5698380676, 1.5761595041, 1.5825551707, 1.5890269152, 1.5955766552, 1.6022063814, 1.6089181619, 1.6157141455, 1.6225965666, 1.6295677496, 1.6366301136, 1.6437861781, 1.6510385679, 1.6583900199, 1.6658433889, 1.6734016548, 1.6810679299, 1.688845467, 1.6967376678, 1.7047480922, 1.7128804685, 1.7211387037, 1.7295268955, 1.7380493449, 1.7467105696, 1.7555153192, 1.7644685908, 1.7735756471, 1.7828420354, 1.7922736081, 1.8018765459, 1.8116573828, 1.8216230334, 1.8317808231, 1.8421385213, 1.852704378, 1.8634871646, 1.8744962181, 1.8857414913, 1.8972336083, 1.9089839259, 1.9210046024, 1.9333086756, 1.9459101491, 1.95882409, 1.9720667402, 1.9856556408, 1.9996097752, 2.0139497314, 2.028697888, 2.0438786285, 2.0595185874, 2.0756469371, 2.09229572, 2.1095002386, 2.1272995125, 2.14573682, 2.164860341, 2.1847239262, 2.205388024, 2.2269208036, 2.2493995294, 2.2729122539, 2.2975599251, 2.3234590338, 2.3507449785, 2.3795763922, 2.4101407828, 2.442661996, 2.4774102575, 2.5147159425, 2.5549888687, 2.598746003, 2.6466524124, 2.6995838634, 2.7587264482, 2.8257430856, 2.9030692406, 2.9944807084, 3.1063030479, 3.2503945224, 3.453377389, 3.8002011673}; 

	int indice = floor(x*1000);

	if(x > 999)
		x = 999;
	else if (x < -999)
		x = -999;

	return ATANH[indice+999];
}
//PARA TESTAR OS TAMANHOS GRANDES, DESCOMENTAR AS RESPECTIVAS TABELAS DA NORMA, OS DEFINES E AS LINHAS entre 240 e 320
//Teste para LDPC(8, 4)
/*
#define n 8
#define k 4
#define el_C 4 // numero de 1s por check node
#define max_it 50 // m�ximo de itera��es
int INDX[n-k] = {4,4,4,4};
int C[n-k][el_C] = {{0, 3, 4, 7},{1, 2, 4, 6},{0, 2, 5, 7},{1, 3, 5, 6}}; // matriz de check nodes
//double in[n] =  {-1.2729, -0.0509, -0.9209, 1.1815, 0.2766, -0.2486, -0.2497, -1.0237}; // palavra-código recebida
//double in[n] =  {-1.2729, 0.0509, -0.9209, 1.1815, 0.2766, -0.2486, -0.2497, -1.0237}; // palavra-código recebida certa de primeira
*/

//Teste para LDPC(7, 4)
/*
#define n 7
#define k 4
#define el_C 4 // numero de 1s por check node
#define max_it 50 // m�ximo de itera��es
int INDX[n-k] = {4,4,4};
int C[n-k][el_C] = {{0, 1, 3, 4},{0, 2, 3, 5},{1, 2, 3, 6}}; // matriz de check nodes
double in[n] =  {4.2, 3.05, -1.2, 2.2, -3.3, 2.8, 1.2}; // palavra-código recebida
//double in[n] =  {4.2, 3.05, -1.2, -2.2, -3.3, 2.8, 1.2}; // palavra-código recebida certa de primeira
*/
//LDPC 2/3 (64800, 43200) DVBT2
/*
#define n 64800
#define k 43200
#define el_C 8 // numero maximo de 1s por check node
#define max_it 50 // m�ximo de itera��es
#define Q_ldpc 60 //constante que vem da norma
int **C_i; // matriz de troca de bits, que será calculada
int *INDX_i; // indices para calcular a matriz C_i, numero de troca de bits por linha
int **C; // matriz de check nodes, que será calculada
int *INDX; // indices para calcular a matriz C, numero de 1s por linha
int *aux_indx; // indice auxiliar para calcular C
*/

//LDPC 2/3 (16200, 10800) DVBT2

#define n 16200
#define k 10800
#define el_C 8 // numero maximo de troca de bits por check node
#define max_it 50 // m�ximo de itera��es
#define Q_ldpc 15 //constante que vem da norma
int **C_i; // matriz de troca de bits, que será calculada
int *INDX_i; // indices para calcular a matriz C_i, numero de troca de bits por linha
int **C; // matriz de check nodes, que será calculada
int *INDX; // indices para calcular a matriz C, numero de 1s por linha
int *aux_indx; // indice auxiliar para calcular C

using namespace std;

int _tmain(int argc, _TCHAR* argv[])
{

	//TABELA DA NORMA 

	//2/3 64800
	/*
	int T[120][13] = {{317, 2255, 2324, 2723, 3538, 3576, 6194, 6700, 9101, 10057, 12739, 17407, 21039},
	{1958, 2007, 3294, 4394, 12762, 14505, 14593, 14692, 16522, 17737, 19245, 21272, 21379},
	{127, 860, 5001, 5633, 8644, 9282, 12690, 14644, 17553, 19511, 19681, 20954, 21002},
	{2514, 2822, 5781, 6297, 8063, 9469, 9551, 11407, 11837, 12985, 15710, 20236, 20393},
	{1565, 3106, 4659, 4926, 6495, 6872, 7343, 8720, 15785, 16434, 16727, 19884, 21325},
	{706, 3220, 8568, 10896, 12486, 13663, 16398, 16599, 19475, 19781, 20625, 20961, 21335},
	{4257, 10449, 12406, 14561, 16049, 16522, 17214, 18029, 18033, 18802, 19062, 19526, 20748},
	{412, 433, 558, 2614, 2978, 4157, 6584, 9320, 11683, 11819, 13024, 14486, 16860},
	{777, 5906, 7403, 8550, 8717, 8770, 11436, 12846, 13629, 14755, 15688, 16392, 16419},
	{4093, 5045, 6037, 7248, 8633, 9771, 10260, 10809, 11326, 12072, 17516, 19344, 19938},
	{2120, 2648, 3155, 3852, 6888, 12258, 14821, 15359, 16378, 16437, 17791, 20614, 21025},
	{1085, 2434, 5816, 7151, 8050, 9422, 10884, 12728, 15353, 17733, 18140, 18729, 20920},
	{856, 1690, 12787, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6532, 7357, 9151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4210, 16615, 18152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{11494, 14036, 17470, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2474, 10291, 10323, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1778, 6973, 10739, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4347, 9570, 18748, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2189, 11942, 20666, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3868, 7526, 17706, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8780, 14796, 18268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{160, 16232, 17399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1285, 2003, 18922, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4658, 17331, 20361, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2765, 4862, 5875, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4565, 5521, 8759, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3484, 7305, 15829, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5024, 17730, 17879, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{7031, 12346, 15024, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{179, 6365, 11352, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2490, 3143, 5098, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2643, 3101, 21259, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4315, 4724, 13130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{594, 17365, 18322, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5983, 8597, 9627, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10837, 15102, 20876, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10448, 20418, 21478, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3848, 12029, 15228, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{708, 5652, 13146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5998, 7534, 16117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2098, 13201, 18317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{9186, 14548, 17776, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5246, 10398, 18597, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3083, 4944, 21021, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{13726, 18495, 19921, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6736, 10811, 17545, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10084, 12411, 14432, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1064, 13555, 17033, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{679, 9878, 13547, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3422, 9910, 20194, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3640, 3701, 10046, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5862, 10134, 11498, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5923, 9580, 15060, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1073, 3012, 16427, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5527, 20113, 20883, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{7058, 12924, 15151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{9764, 12230, 17375, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{772, 7711, 12723, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{555, 13816, 15376, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10574, 11268, 17932, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{15442, 17266, 20482, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{390, 3371, 8781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10512, 12216, 17180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4309, 14068, 15783, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3971, 11673, 20009, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{9259, 14270, 17199, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2947, 5852, 20101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3965, 9722, 15363, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1429, 5689, 16771, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6101, 6849, 12781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3676, 9347, 18761, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{350, 11659, 18342, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5961, 14803, 16123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2113, 9163, 13443, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2155, 9808, 12885, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2861, 7988, 11031, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{7309, 9220, 20745, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6834, 8742, 11977, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2133, 12908, 14704, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10170, 13809, 18153, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{13464, 14787, 14975, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{799, 1107, 3789, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3571, 8176, 10165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5433, 13446, 15481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3351, 6767, 12840, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8950, 8974, 11650, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1430, 4250, 21332, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6283, 10628, 15050, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8632, 14404, 16916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6509, 10702, 16278, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{15900, 16395, 17995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8031, 18420, 19733, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3747, 4634, 17087, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4453, 6297, 16262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2792, 3513, 17031, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{14846, 20893, 21563, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{17220, 20436, 21337, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{275, 4107, 10497, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3536, 7520, 10027, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{14089, 14943, 19455, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1965, 3931, 21104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2439, 11565, 17932, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{154, 15279, 21414, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10017, 11269, 16546, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{7169, 10161, 16928, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10284, 16791, 20655, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{36, 3175, 8475, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2605, 16269, 19290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8947, 9178, 15420, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5687, 9156, 12408, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8096, 9738, 14711, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4935, 8093, 19266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2667, 10062, 15972, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6389, 11318, 14417, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8800, 18137, 18434, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5824, 5927, 15314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6056, 13168, 15179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3284, 13138, 18919, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{13115, 17259, 17332, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};
	*/

	//2/3 16200

	int T[30][13] = {{0, 2084, 1613, 1548, 1286, 1460, 3196, 4297, 2481, 3369, 3451, 4620, 2622},
	{1, 122, 1516, 3448, 2880, 1407, 1847, 3799, 3529, 373, 971, 4358, 3108},
	{2, 259, 3399, 929, 2650, 864, 3996, 3833, 107, 5287, 164, 3125, 2350},
	{3, 342, 3529, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4, 4198, 2147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5, 1880, 4836, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6, 3864, 4910, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{7, 243, 1542, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8, 3011, 1436, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{9, 2167, 2512, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10, 4606, 1003, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{11, 2835, 705, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{12, 3426, 2365, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{13, 3848, 2474, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{14, 1360, 1743, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{0, 163, 2536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{1, 2583, 1180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{2, 1542, 509, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{3, 4418, 1005, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{4, 5212, 5117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{5, 2155, 2922, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{6, 347, 2696, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{7, 226, 4296, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{8, 1560, 487, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{9, 3926, 1640, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{10, 149, 2928, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{11, 2364, 563, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{12, 635, 688, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{13, 231, 1684, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{14, 1129, 3894, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};


	C = new int*[n-k]; //matriz C
	for(int i = 0; i < (n-k); i++)
		C[i] = new int[k+1];

	C_i = new int*[n-k]; //matriz C_i
	for(int i = 0; i < (n-k); i++)
		C_i[i] = new int[el_C];

	INDX = new int[n-k]; //vetor INDX
	INDX_i = new int[n-k]; //vetor INDX_i
	aux_indx = new int[n-k]; //vetor aux_indx

	int count = 0;

	//inicializar C e INDX
	for (int j = 0; j < (n-k); j++)
	{
		for (int i = 0; i < el_C; i++)
		{
			C_i[j][i] = -1;
		}
		for (int i = 0; i < (k+1); i++)
		{
			C[j][i] = -1;
		}
		INDX_i[j] = 0;
		INDX[j] = 0;
		aux_indx[j] = 0;
	}

	//for (int j = 0; j < 120; j++) //numero de linhas, LDPC 64800
	for (int j = 0; j < 30; j++) //numero de linhas, LDPC 16200
	{
		for (int kkk = 0; kkk < 360; kkk++) //elementos
		{
			for (int i = 0; i < 13; i++) //elementos em uma linha
			{
				if(T[j][i] != -1)
				{
					C_i[(T[j][i]+kkk*Q_ldpc)%(n-k)][INDX_i[(T[j][i]+kkk*Q_ldpc)%(n-k)]] = count;

					INDX_i[(T[j][i]+kkk*Q_ldpc)%(n-k)] += 1;
				}
			}
			count++;
		}
	}

	int bit; //se inverteu para 0 ou 1

	for(int i = 0; i < k; i++) // para cada i
	{
		bit = 0;
		for(int j = 0; j < (n-k); j++) //para cada p
		{
			if(C_i[j][aux_indx[j]] == i)
			{
				bit = bit^1;
				aux_indx[j]++;
			}

			if(bit == 1)
			{
				C[j][INDX[j]] = i;
				INDX[j]++;
			}
		}
	}

	for (int i = 0; i < (n-k); i++)
	{
		C[i][INDX[i]] = i+k;
		INDX[i]++;
	}

	




	/*
	FILE *F = fopen("matriz_C_i.txt", "w");
	for (int j = 0; j < (n-k); j++)
	{
		for (int i = 0; i < el_C; i++)
		{
			fprintf(F, "%i,", C_i[j][i]);
		}
		fprintf(F, "\n");
	}
	fclose(F);
	printf("OK matriz_C_i\n");
	*/
	/*
	FILE *G = fopen("vetor_INDX_i.txt", "w");
	for (int j = 0; j < (n-k); j++)
	{
		fprintf(G, "%i,", INDX_i[j]);
	}
	fclose(G);
	printf("OK vetor_INDX_i\n");
	*/
	/*
	FILE *f = fopen("matriz_C.txt", "w");
	for (int j = 0; j < (n-k); j++)
	{
		for (int i = 0; i < (n-k); i++)
		{
			fprintf(f, "%i,", C[j][i]);
		}
		fprintf(f, "\n");
	}
	fclose(f);
	printf("OK matriz_C\n");
	*/
	/*
	FILE *g = fopen("vetor_INDX.txt", "w");
	for (int j = 0; j < (n-k); j++)
	{
		fprintf(g, "%i,", INDX[j]);
	}
	fclose(g);
	printf("OK vetor_INDX\n");
	*/











	double *LLR = new double[n]; //LLR original
	double *LLR_aux = new double[n]; //LLRs intermediárias para os cálculos
	int *r_aux = new int[n]; //LLR transformada em 1 e 0
	int *S = new int[n-k]; //sindrome
	int I = 0; //numero de iteraçoes
	int aux_S = 0; //auxiliar para saber se a sindrome é zero

	double** R = new double*[n-k]; //matriz R
	for(int i = 0; i < n-k; i++)
		R[i] = new double[n];

	double** Q = new double*[n-k]; //matriz Q
	for(int i = 0; i < n-k; i++)
		Q[i] = new double[n];


	//mensagem tudo 0, com erro na posiçao 5

	for (int i = 0; i < n; i++)
	{
		//LLR[i] = -25;
	}
	//LLR[5] = 5;


	//mensagem gerada pelo matlab - se eu quiser uam entrada diferente de zero
	FILE *ff = fopen("in_decoder.txt","r");

	for(int i = 0; i < n; i++)
	{
		fscanf(ff, "%lf", &LLR[i]);
		printf("");
	}

	fclose(ff);

	LLR[5] = 100; //inserindo erro
	printf("");

	for(int i = 0; i < n; i++)
	{
		//LLR[i] = in[i];
		LLR_aux[i] = LLR[i];

		//checar se a mesnagem est� certa de primeira

		//para cada elemento de LLR

		if (LLR[i] > 0)
			r_aux[i] = 1;
		else
			r_aux[i] = 0;

		printf("");
	}

	//zerar sindrome e matrizes Q e R
	for(int i = 0; i < (n-k); i++)
	{
		S[i] = 0;
		for(int j = 0; j < n; j++)
		{
			R[i][j] = 0;
			Q[i][j] = 0;
		}
	}

	//calculo da sindrome
	for(int i = 0; i < (n-k); i++)
	{
		for(int j = 0; j < INDX[i]; j++)
		{
			S[i] = S[i] ^ r_aux[C[i][j]];
			if(r_aux[C[i][j]] == 1)
				printf("");
		}
		printf("");
	}

	//checar se sindrome � zero
	for(int i = 0; i < (n-k); i++)
	{
		aux_S = aux_S + S[i];
	}

	// mensagem ok
	if(aux_S == 0) 
	{
		printf("MENSAGEM OK. NUMERO DE ITERACOES = %i\n", I);
		goto end;
	}

	//mensagem errada, primeira passagem
	I++;

	printf("ITERACAO %i\n", I);

	//para cada R
	for(int i = 0; i < (n-k); i++)
	{
		//para cada elemento de R
		for(int j = 0; j < INDX[i]; j++)
		{
			//produt�rio
			for(int K = 0; K < INDX[i]; K++)
			{
				if (K == 0)
					R[i][C[i][j]] = 1.0;  

				if (K != j)
				{
					R[i][C[i][j]] = R[i][C[i][j]]*tanh(0.5*LLR[C[i][K]]);
				}
				printf("");
			}
			R[i][C[i][j]] = 2*aTanh(R[i][C[i][j]]);
		}
	}

	//para cada elemento de LLR
	for(int j = 0; j < (n-k); j++)
	{
		//para cada elemento de R
		for(int i = 0; i < INDX[j]; i++)
		{
			LLR_aux[C[j][i]] = LLR_aux[C[j][i]]+R[j][C[j][i]];
			printf("");
		}
		printf("");
	}

	for(int i = 0; i < n; i++)
	{
		if (LLR_aux[i] > 0)
			r_aux[i] = 1;
		else
			r_aux[i] = 0;
	}

	//zerar s�ndrome;
	aux_S = 0;
	for(int i = 0; i < (n-k); i++)
		S[i] = 0;

	//calculo da sindrome
	for(int i = 0; i < (n-k); i++)
	{
		for(int j = 0; j < INDX[i]; j++)
		{
			S[i] = S[i] ^ r_aux[C[i][j]];
		}
	}

	//checar se sindrome � zero
	for(int i = 0; i < (n-k); i++)
	{
		aux_S = aux_S + S[i];
	}

	// mensagem ok
	if(aux_S == 0) 
	{
		printf("MENSAGEM OK. NUMERO DE ITERACOES = %i\n", I);
		goto end;
	}

	//mensagem errada, segunda passagem em diante
	for(I = 2; I <= max_it; I++)
	{
		printf("ITERACAO %i\n", I);
		//zerar matriz Q
		for(int j = 0; j < (n-k); j++)
			for(int i = 0; i < n; i++)
				Q[j][i] = 0;

		printf("");

		//cada linha de R
		for(int j = 0; j < (n-k); j++)
		{
			//cada elemento de LLR
			for(int i = 0; i < INDX[j]; i++)
			{
				//somatorio
				for (int K = 0; K < (n-k); K++)
				{
					if (K != j)
						Q[j][C[j][i]] = Q[j][C[j][i]]+R[K][C[j][i]];
					printf("");
				}
				Q[j][C[j][i]] = Q[j][C[j][i]] + LLR[C[j][i]]; // metodo original
				//Q[j][C[j][i]] = Q[j][C[j][i]] + LLR_aux[C[j][i]]; //meu metodo
				printf("");
			}
		}

		printf("");

		//para linha de R
		for(int i = 0; i < (n-k); i++)
		{
			//para cada elemento de R
			for(int j = 0; j < INDX[i]; j++)
			{
				//produt�rio
				for(int K = 0; K < INDX[i]; K++)
				{
					if (K == 0)
						R[i][C[i][j]] = 1.0;  

					if (K != j)
					{
						R[i][C[i][j]] = R[i][C[i][j]]*tanh(0.5*Q[i][C[i][K]]);
					}
					printf("");
				}
				R[i][C[i][j]] = 2*aTanh(R[i][C[i][j]]);
			}
		}

		//esse for usa só para o metodo original, no meu metodo nao usa ele
		for(int i = 0; i < n; i++)
			LLR_aux[i] = LLR[i];

		//para cada elemento de LLR
		for(int j = 0; j < (n-k); j++)
		{
			//para cada elemento de R
			for(int i = 0; i < INDX[j]; i++)
			{
				LLR_aux[C[j][i]] = LLR_aux[C[j][i]]+R[j][C[j][i]];
			}
		}

		printf("");

		for(int i = 0; i < n; i++)
		{
			if (LLR_aux[i] > 0)
				r_aux[i] = 1;
			else
				r_aux[i] = 0;
		}

		//zerar s�ndrome;
		aux_S = 0;
		for(int i = 0; i < (n-k); i++)
			S[i] = 0;

		//calculo da sindrome
		for(int i = 0; i < (n-k); i++)
		{
			for(int j = 0; j < INDX[i]; j++)
			{
				S[i] = S[i] ^ r_aux[C[i][j]];
			}
		}

		//checar se sindrome � zero
		for(int i = 0; i < (n-k); i++)
		{
			aux_S = aux_S + S[i];
		}

		// mensagem ok
		if(aux_S == 0) 
		{
			printf("MENSAGEM OK. NUMERO DE ITERACOES = %i\n", I);
			goto end;
		}
	}

	printf("MENSAGEM NAO RECUPERADA. NUMERO MAXIMO DE ITERACOES = %i\n", I-1);

end:

	printf("ITERACOES = %i\n ", I);


	//r_aux é a mensagem corrigida, out é a saída, sem os bits de paridade
	for(int i = 0; i < k; i++)
	{
		//out[i] = r_aux[i]; //ESSA LINHA TEM QUE FICAR DESCOMENTADA
	}






	delete [] LLR;
	delete [] LLR_aux;
	delete [] r_aux;
	delete [] S;

	for (int i = 0; i < n-k; ++i)
		delete [] R[i];
	delete [] R;

	for (int i = 0; i < n-k; ++i)
		delete [] Q[i];
	delete [] Q;





	printf("");
	return 0;
}

